name: Build & Release (mac + linux)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  mac:
    runs-on: macos-13
    strategy:
      matrix: { arch: [x64, arm64] }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci
      - run: npm run inject-alert
      - run: npx electron-builder --mac --${{ matrix.arch }} --publish never
      - uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.arch }}
          path: |
            release/*.dmg
            release/*.zip
            release/*.blockmap
            release/latest-mac.yml
          if-no-files-found: ignore

  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci
      - run: npm run inject-alert
      - run: npx electron-builder --linux --publish never
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            release/*.AppImage
            release/*.deb
          if-no-files-found: ignore

  release:
    runs-on: ubuntu-latest
    needs: [mac, linux]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      # Pull all artifacts and flatten them into ./collected
      - uses: actions/download-artifact@v4
        with:
          path: collected
          merge-multiple: true

      - name: Show collected files (debug)
        run: |
          echo "Collected files:"
          ls -lah collected || true

      - id: read_version
        run: |
          VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Using tag: v$VERSION"

      # Create the draft release if it doesn't exist; otherwise update it
      - name: Ensure draft release exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="v${{ steps.read_version.outputs.version }}"
          # If release exists, this prints info and exits 0; otherwise we create it
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists; will update assets."
          else
            gh release create "$TAG" --draft --prerelease --title "Summoner Desktop $TAG" --notes "" 
          fi

      # Upload all files, overwriting if they already exist
      - name: Upload assets (overwrite)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ steps.read_version.outputs.version }}"
          # gh supports globs and --clobber to overwrite existing assets
          gh release upload "$TAG" collected/* --clobber
